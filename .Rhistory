events <- select(events, -X)
events <- left_join(events, valueModel, by = c("pass_end_xlocation" = "xlocation_master", "pass_end_ylocation" = "ylocation_master"))
colnames(events)[colnames(events)=="allAroundAveragexG"] <- "passDestinationxG"
events <- select(events, -X)
events$passxGValue <- events$passDestinationxG - events$locationxG
write.csv(events, file = "wcEventsWithValues.csv")
library("dplyr")
eventsFile <- "~/StatsBombVizWC2018/WC+matches+clean.csv"
valueModel <- "~/StatsBombVizWC2018/pitchCoordinateValues.csv"
events <- read.csv(file=eventsFile, header=TRUE, sep=",")
valueModel <- read.csv(file=valueFile, header=TRUE, sep=",")
events <- left_join(events, valueModel, by = c("xlocation" = "xlocation_master", "ylocation" = "ylocation_master"))
colnames(events)[colnames(events)=="allAroundAveragexG"] <- "locationxG"
events <- select(events, -X)
events <- left_join(events, valueModel, by = c("pass_end_xlocation" = "xlocation_master", "pass_end_ylocation" = "ylocation_master"))
colnames(events)[colnames(events)=="allAroundAveragexG"] <- "passDestinationxG"
events <- select(events, -X)
events$passxGValue <- events$passDestinationxG - events$locationxG
write.csv(events, file = "wcEventsWithValues.csv")
library("dplyr")
eventsFile <- "~/StatsBombVizWC2018/WC+matches+clean.csv"
valueFile <- "~/StatsBombVizWC2018/pitchCoordinateValues.csv"
events <- read.csv(file=eventsFile, header=TRUE, sep=",")
valueModel <- read.csv(file=valueFile, header=TRUE, sep=",")
events <- left_join(events, valueModel, by = c("xlocation" = "xlocation_master", "ylocation" = "ylocation_master"))
colnames(events)[colnames(events)=="allAroundAveragexG"] <- "locationxG"
events <- select(events, -X)
events <- left_join(events, valueModel, by = c("pass_end_xlocation" = "xlocation_master", "pass_end_ylocation" = "ylocation_master"))
colnames(events)[colnames(events)=="allAroundAveragexG"] <- "passDestinationxG"
events <- select(events, -X)
events$passxGValue <- events$passDestinationxG - events$locationxG
write.csv(events, file = "wcEventsWithValues.csv")
#I start out loading the packages i need
library("dplyr")
library("ggplot2")
#setting the file as a variable, so I can use different files in the future
dataFile <- "~/Downloads/WC+matches+clean.csv"
#now I'll bring in the csv
WCEvents <- read.csv(file=dataFile, header=TRUE, sep=",")
#setting the file as a variable, so I can use different files in the future
dataFile <- "~/StatsBombVizWC2018/WC+matches+clean.csv"
#now I'll bring in the csv
WCEvents <- read.csv(file=dataFile, header=TRUE, sep=",")
#setting the file as a variable, so I can use different files in the future
dataFile <- "~/StatsBombVizWC2018/eventData/WC+matches+clean.csv"
#now I'll bring in the csv
WCEvents <- read.csv(file=dataFile, header=TRUE, sep=",")
#creating match-distinct numbers as composite keys
WCEvents$match_index <- paste(WCEvents$matchid, WCEvents$index, sep="-")
WCEvents$match_possession <- paste(WCEvents$matchid, WCEvents$possession, sep="-")
#setting the file as a variable, so I can use different files in the future
dataFile <- "~/StatsBombVizWC2018/eventData/WC+matches+clean.csv"
#now I'll bring in the csv
WCEvents <- read.csv(file=dataFile, header=TRUE, sep=",")
#creating match-distinct numbers as composite keys
WCEvents$match_index <- paste(WCEvents$matchid, WCEvents$index, sep="-")
WCEvents$match_possession <- paste(WCEvents$matchid, WCEvents$possession, sep="-")
#so, initially, i did this by dividing the field into grids,
#but now I'm using smoothing so I don't need to do that.
#instead, i'm going to start by calculating an xG for each possession.
groupedPossessions <- group_by(WCEvents, match_possession)
xgForAPossession <- summarize(groupedPossessions, count = n(), xG = sum(shot_statsbomb_xg, na.rm = T))
#I'm going to zero the null values (or NAs in R)
xgForAPossession$xG[is.na(xgForAPossession$xG)]=0
ggplot(modelEvents, aes(x=ylocation, y=xlocation)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
legend.position='none'
)
modelEvents <- filter(modelEvents, possession_team_name == team_name, event_type %in% ballPossessionEventTypes)
ballPossessionEventTypes <- c("Pass", "Dribble", "Shot", "Ball Receipt*")
modelEvents <- filter(modelEvents, possession_team_name == team_name, event_type %in% ballPossessionEventTypes)
#now let's attach those possession xG values every event in the possession
modelEvents <- inner_join(WCEvents, xgForAPossession)
ballPossessionEventTypes <- c("Pass", "Dribble", "Shot", "Ball Receipt*")
modelEvents <- filter(modelEvents, possession_team_name == team_name, event_type %in% ballPossessionEventTypes)
ggplot(modelEvents, aes(x=ylocation, y=xlocation)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
legend.position='none'
)
ggplot(modelEvents, aes(x=ylocation, y=xlocation)) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0))
xGforIndivLocations <- summarize(groupedIndivLocations, count = n(), xG = sum(xG, na.rm = T))
#instead, we'll create the averages for each plot point
#we're going to assume that each side is the same, so we're going to fold these in half.
modelEvents$xlocation <- ifelse(modelEvents$xlocation > 40, 81-modelEvents$xlocation, modelEvents$xlocation)
groupedIndivLocations <- group_by(modelEvents, xlocation, ylocation)
xGforIndivLocations <- summarize(groupedIndivLocations, count = n(), xG = sum(xG, na.rm = T))
#and then unfold them
mirror <- xGforIndivLocations
mirror$xlocation <- 81 - mirror$xlocation
xGforIndivLocations <- rbind(xGforIndivLocations, mirror)
#another graph attempt
ggplot(xGforIndivLocations, aes(x=ylocation, y=xlocation)) +
geom_tile(aes(fill=xG))
xGforIndivLocations$avgxG <- xG/count
xGforIndivLocations$avgxG <- xGforIndivLocations$xG/xGforIndivLocations$count
#another graph attempt
ggplot(xGforIndivLocations, aes(x=ylocation, y=xlocation)) +
geom_tile(aes(fill=avgxG))
#okay, now to the smoothing.  We need a full grid to attach values to.
smoothFullGrid <- expand.grid(xlocation_grid = 1:80, ylocation_grid = 1:120)
#attaching the values...
smoothFullGrid <- left_join(smoothFullGrid, xGforIndivLocations, by = c("xlocation_grid" = "xlocation", "ylocation_grid" = "ylocation"))
#and zeroing the nulls
smoothFullGrid$count[is.na(smoothFullGrid$count)]=0
smoothFullGrid$xG[is.na(smoothFullGrid$xG)]=0
#I start out loading the packages i need
library("dplyr")
library("ggplot2")
#setting the file as a variable, so I can use different files in the future
dataFile <- "~/StatsBombVizWC2018/eventData/WC+matches+clean.csv"
#now I'll bring in the csv
WCEvents <- read.csv(file=dataFile, header=TRUE, sep=",")
#creating match-distinct numbers as composite keys
WCEvents$match_index <- paste(WCEvents$matchid, WCEvents$index, sep="-")
WCEvents$match_possession <- paste(WCEvents$matchid, WCEvents$possession, sep="-")
#so, initially, i did this by dividing the field into grids,
#but now I'm using smoothing so I don't need to do that.
#instead, i'm going to start by calculating an xG for each possession.
groupedPossessions <- group_by(WCEvents, match_possession)
xgForAPossession <- summarize(groupedPossessions, count = n(), xG = sum(shot_statsbomb_xg, na.rm = T))
#I'm going to zero the null values (or NAs in R)
xgForAPossession$xG[is.na(xgForAPossession$xG)]=0
#now let's attach those possession xG values every event in the possession
modelEvents <- inner_join(WCEvents, xgForAPossession)
#okay, now that i have the xG for each possession, I can start to map out the pitch
#first step is to look at attacking events only.  We want to make sure that the event
#was compelted by the team in possession.
#We also want to only have a couple sepecific events, so we'll create a vector with the event type names
ballPossessionEventTypes <- c("Pass", "Dribble", "Shot", "Ball Receipt*")
modelEvents <- filter(modelEvents, possession_team_name == team_name, event_type %in% ballPossessionEventTypes)
#could potentially filter out set pieces here, and other types of events. create an isSetPiece column or something
#okay, that removes a good chunk of events
#I graphed this before to see what it looked like, but not doing that now
#ggplot(modelEvents, aes(x=ylocation, y=xlocation)) +
# stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
#scale_x_continuous(expand = c(0, 0)) +
#scale_y_continuous(expand = c(0, 0))
#instead, we'll create the averages for each plot point
#we're going to assume that each side is the same, so we're going to fold these in half.
modelEvents$xlocation <- ifelse(modelEvents$xlocation > 40, 81-modelEvents$xlocation, modelEvents$xlocation)
groupedIndivLocations <- group_by(modelEvents, xlocation, ylocation)
xGforIndivLocations <- summarize(groupedIndivLocations, count = n(), xG = sum(xG, na.rm = T))
#and then unfold them
mirror <- xGforIndivLocations
mirror$xlocation <- 81 - mirror$xlocation
xGforIndivLocations <- rbind(xGforIndivLocations, mirror)
xGforIndivLocations$avgxG <- xGforIndivLocations$xG/xGforIndivLocations$count
#another graph attempt
ggplot(xGforIndivLocations, aes(x=ylocation, y=xlocation)) +
geom_tile(aes(fill=avgxG))
#okay, now to the smoothing.  We need a full grid to attach values to.
smoothFullGrid <- expand.grid(xlocation_grid = 1:80, ylocation_grid = 1:120)
#attaching the values...
smoothFullGrid <- left_join(smoothFullGrid, xGforIndivLocations, by = c("xlocation_grid" = "xlocation", "ylocation_grid" = "ylocation"))
#and zeroing the nulls
smoothFullGrid$count[is.na(smoothFullGrid$count)]=0
smoothFullGrid$xG[is.na(smoothFullGrid$xG)]=0
#now, we're going to smooth things out.  to do this, we're going to get an average
#of the 8 neighboring points plus the central one. this is probably the wrong way
#to do this, but i'm hacking away.  I'm conceptualizing all of these as cardinal
#directions, hence the labeling.
#north join
northSet <- smoothFullGrid
northSet$ylocation_grid <- northSet$ylocation_grid + 1
northSet <- rename(northSet, northCount = 'count', northTotalxG = 'xG', xlocation_gridN = 'xlocation_grid', ylocation_gridN = 'ylocation_grid' )
#northSet[is.na(northSet)] = 0
#northeast join
northeastSet <- smoothFullGrid
northeastSet$ylocation_grid <- northeastSet$ylocation_grid + 1
northeastSet$xlocation_grid <- northeastSet$xlocation_grid - 1
northeastSet <- rename(northeastSet, northeastCount = 'count', northeastTotalxG = 'xG', xlocation_gridNE = 'xlocation_grid', ylocation_gridNE = 'ylocation_grid')
#northeastSet[is.na(northeastSet)] = 0
#east join
eastSet <- smoothFullGrid
eastSet$xlocation_grid <- eastSet$xlocation_grid - 1
eastSet <- rename(eastSet, eastCount = 'count', eastTotalxG = 'xG', xlocation_gridE = 'xlocation_grid', ylocation_gridE = 'ylocation_grid')
#eastSet[is.na(eastSet)] = 0
#southeast join
southeastSet <- smoothFullGrid
southeastSet$ylocation_grid <- southeastSet$ylocation_grid - 1
southeastSet$xlocation_grid <- southeastSet$xlocation_grid - 1
southeastSet <- rename(southeastSet, southeastCount = 'count', southeastTotalxG = 'xG', xlocation_gridSE = 'xlocation_grid', ylocation_gridSE = 'ylocation_grid')
#southeastSet[is.na(southeastSet)] = 0
#south join
southSet <- smoothFullGrid
southSet$ylocation_grid <- southSet$ylocation_grid - 1
southSet <- rename(southSet, southCount = 'count', southTotalxG = 'xG', xlocation_gridS = 'xlocation_grid', ylocation_gridS = 'ylocation_grid')
#southSet[is.na(southSet)] = 0
#southwest join
southwestSet <- smoothFullGrid
southwestSet$ylocation_grid <- southwestSet$ylocation_grid - 1
southwestSet$xlocation_grid <- southwestSet$xlocation_grid + 1
southwestSet <- rename(southwestSet, southwestCount = 'count', southwestTotalxG = 'xG', xlocation_gridSW = 'xlocation_grid', ylocation_gridSW = 'ylocation_grid')
#southwestSet[is.na(southwestSet)] = 0
#west join
westSet <- smoothFullGrid
westSet$xlocation_grid <- westSet$xlocation_grid + 1
westSet <- rename(westSet, westCount = 'count', westTotalxG = 'xG', xlocation_gridW = 'xlocation_grid', ylocation_gridW = 'ylocation_grid')
#westSet[is.na(westSet)] = 0
#northwest join
northwestSet <- smoothFullGrid
northwestSet$ylocation_grid <- northwestSet$ylocation_grid + 1
northwestSet$xlocation_grid <- northwestSet$xlocation_grid + 1
northwestSet <- rename(northwestSet, northwestCount = 'count', northwestTotalxG = 'xG', xlocation_gridNW = 'xlocation_grid', ylocation_gridNW = 'ylocation_grid')
#northwestSet[is.na(northwestSet)] = 0
#now we need to join them all. first we're going to rename the coordinates. So we can find them later
smoothFullGrid <- rename(smoothFullGrid, xlocation_master = 'xlocation_grid', ylocation_master = 'ylocation_grid', count_master  = 'count', xG_master = 'xG')
smoothFullGrid <- left_join(smoothFullGrid, northSet, by = c("xlocation_master" = "xlocation_gridN", "ylocation_master" = "ylocation_gridN"))
smoothFullGrid <- left_join(smoothFullGrid, northeastSet, by = c("xlocation_master" = "xlocation_gridNE", "ylocation_master" = "ylocation_gridNE"))
smoothFullGrid <- left_join(smoothFullGrid, eastSet, by = c("xlocation_master" = "xlocation_gridE", "ylocation_master" = "ylocation_gridE"))
smoothFullGrid <- left_join(smoothFullGrid, southeastSet, by = c("xlocation_master" = "xlocation_gridSE", "ylocation_master" = "ylocation_gridSE"))
smoothFullGrid <- left_join(smoothFullGrid, southSet, by = c("xlocation_master" = "xlocation_gridS", "ylocation_master" = "ylocation_gridS"))
smoothFullGrid <- left_join(smoothFullGrid, southwestSet, by = c("xlocation_master" = "xlocation_gridSW", "ylocation_master" = "ylocation_gridSW"))
smoothFullGrid <- left_join(smoothFullGrid, westSet, by = c("xlocation_master" = "xlocation_gridW", "ylocation_master" = "ylocation_gridW"))
smoothFullGrid <- left_join(smoothFullGrid, northwestSet, by = c("xlocation_master" = "xlocation_gridNW", "ylocation_master" = "ylocation_gridNW"))
#now we add on the all around bits. and get an average
smoothFullGrid$allAroundCount <- sumsmoothFullGrid$count_master + smoothFullGrid$northCount + smoothFullGrid$northeastCount + smoothFullGrid$eastCount + smoothFullGrid$southeastCount + smoothFullGrid$southwestCount + smoothFullGrid$southCount + smoothFullGrid$westCount + smoothFullGrid$northwestCount
smoothFullGrid$allAroundxG <- smoothFullGrid$xG_master + smoothFullGrid$northTotalxG + smoothFullGrid$northeastTotalxG + smoothFullGrid$eastTotalxG + smoothFullGrid$southeastTotalxG + smoothFullGrid$southwestTotalxG + smoothFullGrid$southTotalxG + smoothFullGrid$westTotalxG + smoothFullGrid$northwestTotalxG
smoothFullGrid$allAroundAveragexG <- smoothFullGrid$allAroundxG/smoothFullGrid$allAroundCount
smoothFullGrid <- select(smoothFullGrid, xlocation_master, ylocation_master, allAroundAveragexG)
ggplot(smoothFullGrid, aes(x=smoothFullGrid$ylocation_master, y=smoothFullGrid$xlocation_master)) +
geom_tile(fill=smoothFullGrid$allAroundAveragexG)
#I start out loading the packages i need
library("dplyr")
library("ggplot2")
#setting the file as a variable, so I can use different files in the future
dataFile <- "~/StatsBombVizWC2018/eventData/WC+matches+clean.csv"
#now I'll bring in the csv
WCEvents <- read.csv(file=dataFile, header=TRUE, sep=",")
#creating match-distinct numbers as composite keys
WCEvents$match_index <- paste(WCEvents$matchid, WCEvents$index, sep="-")
WCEvents$match_possession <- paste(WCEvents$matchid, WCEvents$possession, sep="-")
#so, initially, i did this by dividing the field into grids,
#but now I'm using smoothing so I don't need to do that.
#instead, i'm going to start by calculating an xG for each possession.
groupedPossessions <- group_by(WCEvents, match_possession)
xgForAPossession <- summarize(groupedPossessions, count = n(), xG = sum(shot_statsbomb_xg, na.rm = T))
#I'm going to zero the null values (or NAs in R)
xgForAPossession$xG[is.na(xgForAPossession$xG)]=0
#now let's attach those possession xG values every event in the possession
modelEvents <- inner_join(WCEvents, xgForAPossession)
#okay, now that i have the xG for each possession, I can start to map out the pitch
#first step is to look at attacking events only.  We want to make sure that the event
#was compelted by the team in possession.
#We also want to only have a couple sepecific events, so we'll create a vector with the event type names
ballPossessionEventTypes <- c("Pass", "Dribble", "Shot", "Ball Receipt*")
modelEvents <- filter(modelEvents, possession_team_name == team_name, event_type %in% ballPossessionEventTypes)
#could potentially filter out set pieces here, and other types of events. create an isSetPiece column or something
#okay, that removes a good chunk of events
#I graphed this before to see what it looked like, but not doing that now
#ggplot(modelEvents, aes(x=ylocation, y=xlocation)) +
# stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
#scale_x_continuous(expand = c(0, 0)) +
#scale_y_continuous(expand = c(0, 0)) +
#theme(
#  legend.position='none'
#)
#instead, we'll create the averages for each plot point
#we're going to assume that each side is the same, so we're going to fold these in half.
modelEvents$xlocation <- ifelse(modelEvents$xlocation > 40, 81-modelEvents$xlocation, modelEvents$xlocation)
groupedIndivLocations <- group_by(modelEvents, xlocation, ylocation)
xGforIndivLocations <- summarize(groupedIndivLocations, count = n(), xG = sum(xG, na.rm = T))
#and then unfold them
mirror <- xGforIndivLocations
mirror$xlocation <- 81 - mirror$xlocation
xGforIndivLocations <- rbind(xGforIndivLocations, mirror)
#another graph attempt
#ggplot(xGforIndivLocations, aes(x=ylocation, y=xlocation)) +
# geom_tile(aes(fill=xG))
#okay, now to the smoothing.  We need a full grid to attach values to.
smoothFullGrid <- expand.grid(xlocation_grid = 1:80, ylocation_grid = 1:120)
#attaching the values...
smoothFullGrid <- left_join(smoothFullGrid, xGforIndivLocations, by = c("xlocation_grid" = "xlocation", "ylocation_grid" = "ylocation"))
#and zeroing the nulls
smoothFullGrid$count[is.na(smoothFullGrid$count)]=0
smoothFullGrid$xG[is.na(smoothFullGrid$xG)]=0
#now, we're going to smooth things out.  to do this, we're going to get an average
#of the 8 neighboring points plus the central one. this is probably the wrong way
#to do this, but i'm hacking away.  I'm conceptualizing all of these as cardinal
#directions, hence the labeling.
#north join
northSet <- smoothFullGrid
northSet$ylocation_grid <- northSet$ylocation_grid + 1
northSet <- rename(northSet, northCount = 'count', northTotalxG = 'xG', xlocation_gridN = 'xlocation_grid', ylocation_gridN = 'ylocation_grid' )
#northSet[is.na(northSet)] = 0
#northeast join
northeastSet <- smoothFullGrid
northeastSet$ylocation_grid <- northeastSet$ylocation_grid + 1
northeastSet$xlocation_grid <- northeastSet$xlocation_grid - 1
northeastSet <- rename(northeastSet, northeastCount = 'count', northeastTotalxG = 'xG', xlocation_gridNE = 'xlocation_grid', ylocation_gridNE = 'ylocation_grid')
#northeastSet[is.na(northeastSet)] = 0
#east join
eastSet <- smoothFullGrid
eastSet$xlocation_grid <- eastSet$xlocation_grid - 1
eastSet <- rename(eastSet, eastCount = 'count', eastTotalxG = 'xG', xlocation_gridE = 'xlocation_grid', ylocation_gridE = 'ylocation_grid')
#eastSet[is.na(eastSet)] = 0
#southeast join
southeastSet <- smoothFullGrid
southeastSet$ylocation_grid <- southeastSet$ylocation_grid - 1
southeastSet$xlocation_grid <- southeastSet$xlocation_grid - 1
southeastSet <- rename(southeastSet, southeastCount = 'count', southeastTotalxG = 'xG', xlocation_gridSE = 'xlocation_grid', ylocation_gridSE = 'ylocation_grid')
#southeastSet[is.na(southeastSet)] = 0
#south join
southSet <- smoothFullGrid
southSet$ylocation_grid <- southSet$ylocation_grid - 1
southSet <- rename(southSet, southCount = 'count', southTotalxG = 'xG', xlocation_gridS = 'xlocation_grid', ylocation_gridS = 'ylocation_grid')
#southSet[is.na(southSet)] = 0
#southwest join
southwestSet <- smoothFullGrid
southwestSet$ylocation_grid <- southwestSet$ylocation_grid - 1
southwestSet$xlocation_grid <- southwestSet$xlocation_grid + 1
southwestSet <- rename(southwestSet, southwestCount = 'count', southwestTotalxG = 'xG', xlocation_gridSW = 'xlocation_grid', ylocation_gridSW = 'ylocation_grid')
#southwestSet[is.na(southwestSet)] = 0
#west join
westSet <- smoothFullGrid
westSet$xlocation_grid <- westSet$xlocation_grid + 1
westSet <- rename(westSet, westCount = 'count', westTotalxG = 'xG', xlocation_gridW = 'xlocation_grid', ylocation_gridW = 'ylocation_grid')
#westSet[is.na(westSet)] = 0
#northwest join
northwestSet <- smoothFullGrid
northwestSet$ylocation_grid <- northwestSet$ylocation_grid + 1
northwestSet$xlocation_grid <- northwestSet$xlocation_grid + 1
northwestSet <- rename(northwestSet, northwestCount = 'count', northwestTotalxG = 'xG', xlocation_gridNW = 'xlocation_grid', ylocation_gridNW = 'ylocation_grid')
#northwestSet[is.na(northwestSet)] = 0
#now we need to join them all. first we're going to rename the coordinates. So we can find them later
smoothFullGrid <- rename(smoothFullGrid, xlocation_master = 'xlocation_grid', ylocation_master = 'ylocation_grid', count_master  = 'count', xG_master = 'xG')
smoothFullGrid <- left_join(smoothFullGrid, northSet, by = c("xlocation_master" = "xlocation_gridN", "ylocation_master" = "ylocation_gridN"))
smoothFullGrid <- left_join(smoothFullGrid, northeastSet, by = c("xlocation_master" = "xlocation_gridNE", "ylocation_master" = "ylocation_gridNE"))
smoothFullGrid <- left_join(smoothFullGrid, eastSet, by = c("xlocation_master" = "xlocation_gridE", "ylocation_master" = "ylocation_gridE"))
smoothFullGrid <- left_join(smoothFullGrid, southeastSet, by = c("xlocation_master" = "xlocation_gridSE", "ylocation_master" = "ylocation_gridSE"))
smoothFullGrid <- left_join(smoothFullGrid, southSet, by = c("xlocation_master" = "xlocation_gridS", "ylocation_master" = "ylocation_gridS"))
smoothFullGrid <- left_join(smoothFullGrid, southwestSet, by = c("xlocation_master" = "xlocation_gridSW", "ylocation_master" = "ylocation_gridSW"))
smoothFullGrid <- left_join(smoothFullGrid, westSet, by = c("xlocation_master" = "xlocation_gridW", "ylocation_master" = "ylocation_gridW"))
smoothFullGrid <- left_join(smoothFullGrid, northwestSet, by = c("xlocation_master" = "xlocation_gridNW", "ylocation_master" = "ylocation_gridNW"))
#now i need to remove all zeroes
smoothFullGrid[is.na(smoothFullGrid)] = 0
#we need to now add up and average the stuff for each point
smoothFullGrid$allAroundCount <- smoothFullGrid$count_master + smoothFullGrid$northCount + smoothFullGrid$northeastCount + smoothFullGrid$eastCount + smoothFullGrid$southeastCount + smoothFullGrid$southwestCount + smoothFullGrid$southCount + smoothFullGrid$westCount + smoothFullGrid$northwestCount
smoothFullGrid$allAroundxG <- smoothFullGrid$xG_master + smoothFullGrid$northTotalxG + smoothFullGrid$northeastTotalxG + smoothFullGrid$eastTotalxG + smoothFullGrid$southeastTotalxG + smoothFullGrid$southwestTotalxG + smoothFullGrid$southTotalxG + smoothFullGrid$westTotalxG + smoothFullGrid$northwestTotalxG
smoothFullGrid$allAroundAveragexG <- smoothFullGrid$allAroundxG/smoothFullGrid$allAroundCount
#now we get the columns we want
smoothFullGrid <- select(smoothFullGrid, xlocation_master, ylocation_master, allAroundAveragexG)
#and graph it
ggplot(smoothFullGrid, aes(x=ylocation_master, y=xlocation_master)) +
geom_tile(aes(fill=allAroundAveragexG)) +
scale_fill_distiller(palette="Spectral", direction=-1)
#looking at the final third specifially
smoothFullGridZoom <-filter(smoothFullGrid, ylocation_master > 79)
ggplot(smoothFullGrid, aes(x=ylocation_master, y=xlocation_master, z=allAroundAveragexG)) +
geom_contour() +
xlim(0, 120) +
ylim(0,80)
#Okay, now we need to handle those nulls on the outside
#and graph it
ggplot(smoothFullGrid, aes(x=ylocation_master, y=xlocation_master)) +
geom_tile(aes(fill=allAroundAveragexG)) +
scale_fill_distiller(palette="Spectral", direction=-1)
#I start out loading the packages i need
library("dplyr")
library("ggplot2")
#setting the file as a variable, so I can use different files in the future
dataFile <- "~/StatsBombVizWC2018/eventData/WC+matches+clean.csv"
#now I'll bring in the csv
WCEvents <- read.csv(file=dataFile, header=TRUE, sep=",")
#creating match-distinct numbers as composite keys
WCEvents$match_index <- paste(WCEvents$matchid, WCEvents$index, sep="-")
WCEvents$match_possession <- paste(WCEvents$matchid, WCEvents$possession, sep="-")
#so, initially, i did this by dividing the field into grids,
#but now I'm using smoothing so I don't need to do that.
#instead, i'm going to start by calculating an xG for each possession.
groupedPossessions <- group_by(WCEvents, match_possession)
xgForAPossession <- summarize(groupedPossessions, count = n(), xG = sum(shot_statsbomb_xg, na.rm = T))
#I'm going to zero the null values (or NAs in R)
xgForAPossession$xG[is.na(xgForAPossession$xG)]=0
#now let's attach those possession xG values every event in the possession
modelEvents <- inner_join(WCEvents, xgForAPossession)
#okay, now that i have the xG for each possession, I can start to map out the pitch
#first step is to look at attacking events only.  We want to make sure that the event
#was compelted by the team in possession.
#We also want to only have a couple sepecific events, so we'll create a vector with the event type names
ballPossessionEventTypes <- c("Pass", "Dribble", "Shot", "Ball Receipt*")
modelEvents <- filter(modelEvents, possession_team_name == team_name, event_type %in% ballPossessionEventTypes, shot_type != "Penalty")
#could potentially filter out set pieces here, and other types of events. create an isSetPiece column or something
#okay, that removes a good chunk of events
#I graphed this before to see what it looked like, but not doing that now
#ggplot(modelEvents, aes(x=ylocation, y=xlocation)) +
# stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
#scale_x_continuous(expand = c(0, 0)) +
#scale_y_continuous(expand = c(0, 0)) +
#theme(
#  legend.position='none'
#)
#instead, we'll create the averages for each plot point
#we're going to assume that each side is the same, so we're going to fold these in half.
modelEvents$xlocation <- ifelse(modelEvents$xlocation > 40, 81-modelEvents$xlocation, modelEvents$xlocation)
groupedIndivLocations <- group_by(modelEvents, xlocation, ylocation)
xGforIndivLocations <- summarize(groupedIndivLocations, count = n(), xG = sum(xG, na.rm = T))
#and then unfold them
mirror <- xGforIndivLocations
mirror$xlocation <- 81 - mirror$xlocation
xGforIndivLocations <- rbind(xGforIndivLocations, mirror)
#another graph attempt
#ggplot(xGforIndivLocations, aes(x=ylocation, y=xlocation)) +
# geom_tile(aes(fill=xG))
#okay, now to the smoothing.  We need a full grid to attach values to.
smoothFullGrid <- expand.grid(xlocation_grid = 1:80, ylocation_grid = 1:120)
#attaching the values...
smoothFullGrid <- left_join(smoothFullGrid, xGforIndivLocations, by = c("xlocation_grid" = "xlocation", "ylocation_grid" = "ylocation"))
#and zeroing the nulls
smoothFullGrid$count[is.na(smoothFullGrid$count)]=0
smoothFullGrid$xG[is.na(smoothFullGrid$xG)]=0
#now, we're going to smooth things out.  to do this, we're going to get an average
#of the 8 neighboring points plus the central one. this is probably the wrong way
#to do this, but i'm hacking away.  I'm conceptualizing all of these as cardinal
#directions, hence the labeling.
#north join
northSet <- smoothFullGrid
northSet$ylocation_grid <- northSet$ylocation_grid + 1
northSet <- rename(northSet, northCount = 'count', northTotalxG = 'xG', xlocation_gridN = 'xlocation_grid', ylocation_gridN = 'ylocation_grid' )
#northSet[is.na(northSet)] = 0
#northeast join
northeastSet <- smoothFullGrid
northeastSet$ylocation_grid <- northeastSet$ylocation_grid + 1
northeastSet$xlocation_grid <- northeastSet$xlocation_grid - 1
northeastSet <- rename(northeastSet, northeastCount = 'count', northeastTotalxG = 'xG', xlocation_gridNE = 'xlocation_grid', ylocation_gridNE = 'ylocation_grid')
#northeastSet[is.na(northeastSet)] = 0
#east join
eastSet <- smoothFullGrid
eastSet$xlocation_grid <- eastSet$xlocation_grid - 1
eastSet <- rename(eastSet, eastCount = 'count', eastTotalxG = 'xG', xlocation_gridE = 'xlocation_grid', ylocation_gridE = 'ylocation_grid')
#eastSet[is.na(eastSet)] = 0
#southeast join
southeastSet <- smoothFullGrid
southeastSet$ylocation_grid <- southeastSet$ylocation_grid - 1
southeastSet$xlocation_grid <- southeastSet$xlocation_grid - 1
southeastSet <- rename(southeastSet, southeastCount = 'count', southeastTotalxG = 'xG', xlocation_gridSE = 'xlocation_grid', ylocation_gridSE = 'ylocation_grid')
#southeastSet[is.na(southeastSet)] = 0
#south join
southSet <- smoothFullGrid
southSet$ylocation_grid <- southSet$ylocation_grid - 1
southSet <- rename(southSet, southCount = 'count', southTotalxG = 'xG', xlocation_gridS = 'xlocation_grid', ylocation_gridS = 'ylocation_grid')
#southSet[is.na(southSet)] = 0
#southwest join
southwestSet <- smoothFullGrid
southwestSet$ylocation_grid <- southwestSet$ylocation_grid - 1
southwestSet$xlocation_grid <- southwestSet$xlocation_grid + 1
southwestSet <- rename(southwestSet, southwestCount = 'count', southwestTotalxG = 'xG', xlocation_gridSW = 'xlocation_grid', ylocation_gridSW = 'ylocation_grid')
#southwestSet[is.na(southwestSet)] = 0
#west join
westSet <- smoothFullGrid
westSet$xlocation_grid <- westSet$xlocation_grid + 1
westSet <- rename(westSet, westCount = 'count', westTotalxG = 'xG', xlocation_gridW = 'xlocation_grid', ylocation_gridW = 'ylocation_grid')
#westSet[is.na(westSet)] = 0
#northwest join
northwestSet <- smoothFullGrid
northwestSet$ylocation_grid <- northwestSet$ylocation_grid + 1
northwestSet$xlocation_grid <- northwestSet$xlocation_grid + 1
northwestSet <- rename(northwestSet, northwestCount = 'count', northwestTotalxG = 'xG', xlocation_gridNW = 'xlocation_grid', ylocation_gridNW = 'ylocation_grid')
#northwestSet[is.na(northwestSet)] = 0
#now we need to join them all. first we're going to rename the coordinates. So we can find them later
smoothFullGrid <- rename(smoothFullGrid, xlocation_master = 'xlocation_grid', ylocation_master = 'ylocation_grid', count_master  = 'count', xG_master = 'xG')
smoothFullGrid <- left_join(smoothFullGrid, northSet, by = c("xlocation_master" = "xlocation_gridN", "ylocation_master" = "ylocation_gridN"))
smoothFullGrid <- left_join(smoothFullGrid, northeastSet, by = c("xlocation_master" = "xlocation_gridNE", "ylocation_master" = "ylocation_gridNE"))
smoothFullGrid <- left_join(smoothFullGrid, eastSet, by = c("xlocation_master" = "xlocation_gridE", "ylocation_master" = "ylocation_gridE"))
smoothFullGrid <- left_join(smoothFullGrid, southeastSet, by = c("xlocation_master" = "xlocation_gridSE", "ylocation_master" = "ylocation_gridSE"))
smoothFullGrid <- left_join(smoothFullGrid, southSet, by = c("xlocation_master" = "xlocation_gridS", "ylocation_master" = "ylocation_gridS"))
smoothFullGrid <- left_join(smoothFullGrid, southwestSet, by = c("xlocation_master" = "xlocation_gridSW", "ylocation_master" = "ylocation_gridSW"))
smoothFullGrid <- left_join(smoothFullGrid, westSet, by = c("xlocation_master" = "xlocation_gridW", "ylocation_master" = "ylocation_gridW"))
smoothFullGrid <- left_join(smoothFullGrid, northwestSet, by = c("xlocation_master" = "xlocation_gridNW", "ylocation_master" = "ylocation_gridNW"))
#now i need to remove all zeroes
smoothFullGrid[is.na(smoothFullGrid)] = 0
#we need to now add up and average the stuff for each point
smoothFullGrid$allAroundCount <- smoothFullGrid$count_master + smoothFullGrid$northCount + smoothFullGrid$northeastCount + smoothFullGrid$eastCount + smoothFullGrid$southeastCount + smoothFullGrid$southwestCount + smoothFullGrid$southCount + smoothFullGrid$westCount + smoothFullGrid$northwestCount
smoothFullGrid$allAroundxG <- smoothFullGrid$xG_master + smoothFullGrid$northTotalxG + smoothFullGrid$northeastTotalxG + smoothFullGrid$eastTotalxG + smoothFullGrid$southeastTotalxG + smoothFullGrid$southwestTotalxG + smoothFullGrid$southTotalxG + smoothFullGrid$westTotalxG + smoothFullGrid$northwestTotalxG
smoothFullGrid$allAroundAveragexG <- smoothFullGrid$allAroundxG/smoothFullGrid$allAroundCount
#now we get the columns we want
smoothFullGrid <- select(smoothFullGrid, xlocation_master, ylocation_master, allAroundAveragexG)
#and graph it
ggplot(smoothFullGrid, aes(x=ylocation_master, y=xlocation_master)) +
geom_tile(aes(fill=allAroundAveragexG)) +
scale_fill_distiller(palette="Spectral", direction=-1)
#looking at the final third specifially
smoothFullGridZoom <-filter(smoothFullGrid, ylocation_master > 79)
ggplot(smoothFullGrid, aes(x=ylocation_master, y=xlocation_master, z=allAroundAveragexG)) +
geom_tile(fill=smoothFullGrid$allAroundAveragexG)
#Okay, now we need to handle those nulls on the outside
ggplot(smoothFullGrid, aes(x=ylocation_master, y=xlocation_master)) +
geom_tile(aes(fill=allAroundAveragexG)) +
scale_fill_distiller(palette="Spectral", direction=-1)
#and graph it
ggplot(smoothFullGrid, aes(x=ylocation_master, y=xlocation_master)) +
geom_tile(aes(fill=allAroundAveragexG)) +
scale_fill_distiller(palette="Spectral", direction=-1) +
geom_line(data=read.csv("~/StatsBombTools/pitchLines.csv", header=TRUE, sep=","), aes(x=y, y=x, group=piece), color = "#ffffff", alpha=0.4) +
geom_point(data=read.csv("~/StatsBombTools/pitchDots.csv", header=TRUE, sep=","), aes(x=y, y=x), color = "#ffffff", alpha=0.4)
#and graph it
ggplot(smoothFullGrid, aes(x=ylocation_master, y=xlocation_master)) +
geom_tile(aes(fill=allAroundAveragexG)) +
scale_fill_distiller(palette="Spectral", direction=-1) +
geom_line(data=read.csv("~/StatsBombTools/pitchLines.csv", header=TRUE, sep=","), aes(x=x, y=y, group=piece), color = "#ffffff", alpha=0.4) +
geom_point(data=read.csv("~/StatsBombTools/pitchDots.csv", header=TRUE, sep=","), aes(x=x, y=y), color = "#ffffff", alpha=0.4)
library("dplyr")
eventData <- read.csv("~/StatsBombVizWC2018/eventData/wcEventsWithValues.csv", header=TRUE, sep=",")
